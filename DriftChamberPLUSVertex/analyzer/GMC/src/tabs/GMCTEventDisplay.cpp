////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// GMCTEventDisplay                                                           //
//                                                                            //
// Begin_Html <!--
/*-->

<!--*/
// --> End_Html
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/* Generated header file containing necessary includes                        */
#include "generated/GMCTEventDisplayGeneratedIncludes.h"

////////////////////////////////////////////////////////////////////////////////
/*  This header was generated by ROMEBuilder. Manual changes above the        *
 * following line will be lost next time ROMEBuilder is executed.             */
/////////////////////////////////////----///////////////////////////////////////

#include <set>
#include "util/Geometry.h"
#include "generated/GMCWindow.h"
#include "generated/GMCAnalyzer.h"
#include "tabs/GMCTEventDisplay.h"
#include "TEllipse.h"
#include "TF1.h"
#include "TMultiGraph.h"
#include "TPave.h"
#include "TPavesText.h"
#include "TLatex.h"         

#define D(t) ((-29.95 + sqrt(29.95*29.95 + 4.*3.087*(t)))/(2.*3.087))

// uncomment if you want to include headers of all folders
//#include "GMCAllFolders.h"

ClassImp(GMCTEventDisplay)

//________________________________

void GMCTEventDisplay::CellClicked(){}

//______________________________________________________________________________
void GMCTEventDisplay::Init()
{
  el = 0;
  iso = 0;
  li = 0;
  nl = 0;

  gr=new TGraph();
  grw=new TGraph();
  grMC = new TGraph();
  grw->SetMarkerColor(kBlack);
  grw->SetMarkerStyle(20);

  TGVerticalFrame *fVerticalFrame = new TGVerticalFrame(this,1600,700,kVerticalFrame);
  TGVerticalFrame *fTXTFrame = new TGVerticalFrame(this,800,700,kVerticalFrame);

  fCanvas = new TRootEmbeddedCanvas("fCanvas",this,840,300);
  Int_t wfCanvas = fCanvas->GetCanvasWindowId();
  TCanvas *c123 = new TCanvas("c123", 380, 300,wfCanvas);   
  fCanvas->AdoptCanvas(c123);
  fVerticalFrame->AddFrame(fCanvas, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
  
  fCanvas2 = new TRootEmbeddedCanvas("fCanvas2",this,840,300);
  Int_t wfCanvas2 = fCanvas2->GetCanvasWindowId();
  TCanvas *c1234 = new TCanvas("c1234", 380, 300,wfCanvas2);   
  fCanvas2->AdoptCanvas(c1234);
  fVerticalFrame->AddFrame(fCanvas2, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
  AddFrame(fVerticalFrame, new TGLayoutHints(kLHintsRight | kLHintsTop,2,2,2,2));
  fCanvas3 = new TRootEmbeddedCanvas("fCanvas3",this,320,605);
  Int_t wfCanvas3 = fCanvas3->GetCanvasWindowId();
  TCanvas *c12345 = new TCanvas("c12345", 230, 100,wfCanvas3);   
  fCanvas3->AdoptCanvas(c12345);
  fTXTFrame->AddFrame(fCanvas3, new TGLayoutHints(kLHintsLeft && kLHintsRight,42*20+7,2,2,4));
  fVerticalFrame->AddFrame(fTXTFrame, new TGLayoutHints(kLHintsCenterX,2,2,2,2));

  htmp=new TH2F("htmp","",42*10,-42,42,16*10,-16,16); 
}

//______________________________________________________________________________
void GMCTEventDisplay::EndInit()
{
}

//______________________________________________________________________________
void GMCTEventDisplay::EventHandler()
{
 
  fCanvas->GetCanvas()->cd();    
  grMC->Set(0);

  Geometry *Geom = Geometry::GetInstance();

  DrawingGeom(); 
  Drawing();   

  //for cell is clicked event # 51

  /*int event = gPad->GetEvent();
  cout << "event # = " << event << endl;
  cout << "px = " << gPad->GetEventX() << " py = " << gPad->GetEventY() << endl;
  */
 
  
  fCanvas->GetCanvas()->Update();

  fCanvas2->GetCanvas()->cd();
  if(gAnalyzer->GetEvent()->GetOscWaveformSize()){

  GMCEvent *eventOSC = gAnalyzer->GetEvent();
  TGraph *grosc = eventOSC->GetOscWaveformAt(0)->GetGraph();
  grosc->GetYaxis()->SetTitle("Amplitude [V]");
  grosc->GetXaxis()->SetTitle("Time [ns]");
  grosc->Draw("AL");
  fCanvas2->GetCanvas()->Update();
  }

  fCanvas3->GetCanvas()->cd();

//   TCanvas *c1 = new TCanvas("mathsymb","Mathematical Symbols",600,600);

  fCanvas3->GetCanvas()->Clear();

   TLatex l;
   l.SetTextSize(0.05);

   // Draw First Column
   l.SetTextAlign(12);
   float y, y1,y2,y3,y4, x1, x2 ,x3 ,x4 ,x5 ,x6 ,x7 ,x8;
 
   y1=0.9;  x1=0.05; x2=0.15; x3=0.25; x4=0.35; x5=0.45; x6=0.55; x7=0.65; x8=0.75;
   y2=0.85;
   y3=0.8;
   y4=0.75;
   
   y = 0.95; x1 = 0.05;
   l.DrawLatex(x1, y, "Gas Monitoring Chamber's CHANNEL"); 

   l.DrawLatex(x1, y1, "8"); 

   l.DrawLatex(x1, y3, "16"); 
 
   l.DrawLatex(x2, y2, "7");       
  
   l.DrawLatex(x2, y4, "15");      
 
   l.DrawLatex(x3, y1, "6");         
 
   l.DrawLatex(x3, y3, "14");         
   
   l.DrawLatex(x4, y2,  "5");      
 
   l.DrawLatex(x4, y4, "13");               
 
   l.DrawLatex(x5, y1, "4");         

   l.DrawLatex(x5, y3, "12");         
   
   l.DrawLatex(x6, y2, "3"); 
 
   l.DrawLatex(x6, y4, "11"); 
    
   l.DrawLatex(x7, y1, "2");         
   
   l.DrawLatex(x7, y3, "10");         
 
   l.DrawLatex(x8, y2, "1");      
 
   l.DrawLatex(x8, y4, "9");      


   y = 0.6; x1 = 0.2;               y = 0.6; x2 = 0.4; x3 = 0.6;
   l.DrawLatex(x1, y, "GMC");       l.DrawLatex(x2, y, "TDC");    l.DrawLatex(x3, y,"TIME[ns]");                 
   char channelGMC[50];
      
   Double_t time_meas[17];  

   time_meas[0] = gAnalyzer->GetEvent()->GetTDCRefTime();

   for(int ihit=0; ihit<gAnalyzer->GetHitSize();ihit++){
     time_meas[gAnalyzer->GetHitAt(ihit)->Gettube_nr()]= gAnalyzer->GetHitAt(ihit)->Gett_meas();
   }


   for(int i=0;i<17;i++){

     y = 0.55-0.03*i; x1 = 0.2;     y = 0.55-0.03*i; x2 = 0.4;             y = 0.55-0.03*i; x3 = 0.8;

     l.SetTextAlign(32);
     if(time_meas[i]<999999){
       sprintf(channelGMC,"%5.1f",time_meas[i]);                             l.DrawLatex(x3, y,channelGMC);                  }
     
     l.SetTextAlign(12);
     if(i==0){
       sprintf(channelGMC,"%d",i);
       l.DrawLatex(x1, y,"TRIG");       l.DrawLatex(x2, y,Form("%d",Geom->GetTDCChannel(0)));
     }
     else if(i==gAnalyzer->GetGSP()->Getcentral_tube()){
       sprintf(channelGMC,"%d",i);
       l.DrawLatex(x1, y,channelGMC);       l.DrawLatex(x2, y,"OSC");
     }
     else{
       sprintf(channelGMC,"%d",i);
       l.DrawLatex(x1, y,channelGMC);       l.DrawLatex(x2, y,Form("%d",Geom->GetTDCChannel(i)));
     }

     /*
     l.SetTextAlign(12);
     if(i==0){
       sprintf(channelGMC,"%d",i);
       l.DrawLatex(x1, y,"TRIG");       l.DrawLatex(x2, y,channelGMC);
     }
    
     else if(i<gAnalyzer->GetGSP()->Getcentral_tube() && i>0){
       sprintf(channelGMC,"%d",i); 
       l.DrawLatex(x1, y,channelGMC);    
       l.DrawLatex(x2, y,channelGMC);    }
     
     else if(i==gAnalyzer->GetGSP()->Getcentral_tube()){
       sprintf(channelGMC,"%d",i); 
       l.DrawLatex(x1, y,channelGMC);       l.DrawLatex(x2, y,"OSC" );      }
     
     else if(i>gAnalyzer->GetGSP()->Getcentral_tube()){
       sprintf(channelGMC,"%d",i);
       l.DrawLatex(x1, y,channelGMC);
       sprintf(channelGMC,"%d",i+1); 
       l.DrawLatex(x2, y, channelGMC);      }
     */
   }
   
   fCanvas3->GetCanvas()->Update();   
   
}  
//______________________________________________________________________________
void GMCTEventDisplay::MenuClicked(TGPopupMenu * /* menu */, Long_t /* param */)
{


}

//______________________________________________________________________________
void GMCTEventDisplay::TabSelected()
{


}

//______________________________________________________________________________
void GMCTEventDisplay::TabUnSelected()
{
}

void GMCTEventDisplay::DrawingGeom()
{

  Double_t R = gAnalyzer->GetGSP()->Gettube_radius();
  
  TVector3 wire_pos;
  
  Geometry *Geom = Geometry::GetInstance();

  htmp->SetStats(0);
  htmp->Draw("Axis");
  
  if(el){
    for(Int_t i=0;i<17;i++){
      delete el[i];
    }
    delete [] el;
    el=0;
  }
  
  el = new TEllipse*[17];
  
  for(Int_t i=0;i<17;i++)
    el[i] = new TEllipse(0,0,1,1);

  if(iso){
    for(Int_t i=0;i<17;i++){
      delete iso[i];
    }
    delete [] iso;
    iso=0;
  }
  
  iso = new TEllipse*[17];
  
  for(Int_t i=0;i<17;i++){
    iso[i] = new TEllipse(0,0,1,1);
    iso[i]->SetFillStyle(0);
  }

  for(Int_t itube=1; itube < 17; itube++){ 
    
    el[itube]->SetFillColor(19);   

    wire_pos = Geom->Getwire_pos(itube);

    el[itube]->DrawEllipse(wire_pos.Z(),wire_pos.Y(),R,R,0,360,0);
    
    grw->SetPoint(grw->GetN(),wire_pos.Z(),wire_pos.Y());
    
  }

}

void GMCTEventDisplay::Drawing(){

  Int_t nhits = gAnalyzer->GetHitSize();
  
  TVector3 wire_pos;

  Geometry *Geom = Geometry::GetInstance();

  set<Int_t> done;

  for(Int_t ihit=0; ihit < nhits; ihit++){
    
    if(gAnalyzer->GetMCHitSize()>1){
      Double_t nclust=gAnalyzer->GetMCHitAt(ihit)->Getnclusters();
      for(Int_t iclust=0;iclust<nclust;iclust++){
	grMC->SetPoint(grMC->GetN(),gAnalyzer->GetMCHitAt(ihit)->GetclusterZAt(iclust),gAnalyzer->GetMCHitAt(ihit)->GetclusterYAt(iclust));
      }
    }

    Int_t tube_nr=gAnalyzer->GetHitAt(ihit)->Gettube_nr();
    Double_t R = gAnalyzer->GetGSP()->Gettube_radius();

    Double_t t_meas = gAnalyzer->GetHitAt(ihit)->Gett_meas();
    Double_t d_drift = D(t_meas);

    //cout << "DRAW " << tube_nr << "  " << done.count(tube_nr) << "  " << t_meas << "  " << d_drift << endl;

    wire_pos = Geom->Getwire_pos(tube_nr);
    
    //if(!done.count(tube_nr) && t_meas > -10 && t_meas < 250){
    
    el[tube_nr]->SetFillColor(kMagenta-7);
    el[tube_nr]->DrawEllipse(wire_pos.Z(),wire_pos.Y(),R,R,0,360,0);
    
    iso[tube_nr]->DrawEllipse(wire_pos.Z(),wire_pos.Y(),d_drift,d_drift,0,360,0);
    //done.insert(tube_nr);
    //}
    
  }
  
  grw->Draw("Psame");
  if(grMC->GetN() > 0) grMC->Draw("Psame");

  if(li){
    for(Int_t i=0; i<nl; i++){
      delete li[i];
    }
    delete [] li;
    li=0;
  }

  if(gAnalyzer->GetTrackSize()>0){

    li = new TLine*[gAnalyzer->GetTrackSize()];
    nl = gAnalyzer->GetTrackSize();

    for(Int_t itrk=0;itrk<gAnalyzer->GetTrackSize();itrk++){
      
      Double_t theta=gAnalyzer->GetTrackAt(itrk)->Gettheta_trk();
      Double_t phi=gAnalyzer->GetTrackAt(itrk)->Getphi_trk();
      
      Double_t vx=sin(theta)*sin(phi);
      Double_t vy=sin(theta)*cos(phi);
      Double_t vz=cos(theta);
      
      Double_t xi=gAnalyzer->GetTrackAt(itrk)->Getx0_trk();
      Double_t yi=gAnalyzer->GetTrackAt(itrk)->Gety0_trk();
      Double_t zi=gAnalyzer->GetTrackAt(itrk)->Getz0_trk();
      
      Double_t m=vy/vz;
      Double_t q=yi-m*zi;
      
      li[itrk] = new TLine(-40.,-40.*m+q, 40.,40.*m+q);
      
      li[itrk]->Draw("same");

    }
    
  }

  else {
    nl=0;
  }

  return;
  
}

