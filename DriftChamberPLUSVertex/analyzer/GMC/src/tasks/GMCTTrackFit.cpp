////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// GMCTTrackFit                                                               //
//                                                                            //
// Begin_Html <!--
/*-->

<!--*/
// --> End_Html
//                                                                            //
//                                                                            //
// Please note: The following information is only correct after executing     //
// the ROMEBuilder.                                                           //
//                                                                            //
// This task accesses the following folders :                                 //
//     Hit                                                                    //
//     Track                                                                  //
//                                                                            //
// This task contains the following histgrams :                               //
//    HResidual                                                               //
//                                                                            //
// The histograms/graph are created and saved automaticaly by the task.       //
//                                                                            //
// The following method can be used to get a handle of the histogram/graph :  //
//                                                                            //
// Get<Histogram/Graph Name>()                                                //
//                                                                            //
// For histogram/graph arrays use :                                           //
//                                                                            //
// Get<Histogram/Graph Name>At(Int_t index)                                   //
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/* Generated header file containing necessary includes                        */
#include "generated/GMCTTrackFitGeneratedIncludes.h"

////////////////////////////////////////////////////////////////////////////////
/*  This header was generated by ROMEBuilder. Manual changes above the        *
 * following line will be lost next time ROMEBuilder is executed.             */
/////////////////////////////////////----///////////////////////////////////////

#include "util/Geometry.h"
#include "generated/GMCAnalyzer.h"
#include "tasks/GMCTTrackFit.h"
#include "ROMEiostream.h"
#include "TVector3.h"
#include "TMinuit.h"
#include "TGraph.h"
#include "TF1.h"
#define  DRIFTVELOCITY 0.0263
//#define D(t) ((-29.95 + sqrt(29.95*29.95 + 4.*3.087*(t)))/(2.*3.087))
#define D(t) (0.562428 + 0.0275425*t - 3.5506e-05*t*t)


// uncomment if you want to include headers of all folders
//#include "GMCAllFolders.h"


Double_t DISTANCE(TVector3 wire_pos,TVector3 w,TVector3 trk_pos,TVector3 trk_dir);
Double_t SIGNED_DISTANCE(TVector3 wire_pos,TVector3 w,TVector3 trk_pos,TVector3 trk_dir);
void fcn(Int_t &npar, Double_t *gin, Double_t &f, Double_t *par, Int_t iflag);
void fcn_lr(Int_t &npar, Double_t *gin, Double_t &f, Double_t *par, Int_t iflag);


ClassImp(GMCTTrackFit)

//______________________________________________________________________________
void GMCTTrackFit::Init()
{
}

//______________________________________________________________________________
void GMCTTrackFit::BeginOfRun()
{

}

//______________________________________________________________________________
void GMCTTrackFit::Event() 
{

  Double_t y0=999.;
  
  Double_t z0=999.;
  
  Double_t theta=999.;
  
  Double_t phi=999.;

  gAnalyzer->SetTrackSize(0);

  if(gAnalyzer->GetHitSize() >= GetSP()->GetMinNhit()){

    if(MinuitFit()) {

      if(LeftRightMinuitFit()){

	y0=gAnalyzer->GetTrackAt(0)->Gety0_trk();
	
	z0=gAnalyzer->GetTrackAt(0)->Getz0_trk();
	
	theta=gAnalyzer->GetTrackAt(0)->Gettheta_trk();
	
	phi=gAnalyzer->GetTrackAt(0)->Getphi_trk();
	
	//Plot Fit_results
	
	Int_t nhits = gAnalyzer->GetHitSize();
	TVector3 wire_dir; 
	Int_t tube_nr=9999999;
	
	Geometry *Geom = Geometry::GetInstance();
	
	for(Int_t ihit=0; ihit<nhits; ihit++){
	  
	  tube_nr=gAnalyzer->GetHitAt(ihit)->Gettube_nr();
	  
	  TVector3 wire_pos = Geom->Getwire_pos(tube_nr);
	  
	  wire_dir=TVector3(1,0,0);
	  
	  Double_t trk_impact_par=SIGNED_DISTANCE(wire_pos,wire_dir,TVector3(0.,y0,z0),TVector3(sin(theta)*sin(phi),sin(theta)*cos(phi),cos(theta)));
	  gAnalyzer->GetHitAt(ihit)->Setd_trk(trk_impact_par);
	  gAnalyzer->GetHitAt(ihit)->Setd_meas(TMath::Sign(1.,trk_impact_par)*D(gAnalyzer->GetHitAt(ihit)->Gett_meas()));
	  
	  if(gAnalyzer->GetHitAt(ihit)->Gettube_nr()==gAnalyzer->GetGSP()->Getcentral_tube()){
	    
	    gAnalyzer->GetTrackAt(0)->Setd_trk_central(trk_impact_par);
	    gAnalyzer->GetTrackAt(0)->Setd_meas_central(D(gAnalyzer->GetHitAt(ihit)->Gett_meas()));
	    
	    GetHResidual()->Fill(D(gAnalyzer->GetHitAt(ihit)->Gett_meas()) - gAnalyzer->GetTrackAt(0)->Getd_trk_central());
	    
	  }

	}

      } //end of if(LeftRightMinuitFit())

      else gAnalyzer->SetTrackSize(0);

    }

  }

  else {

    gAnalyzer->SetTrackSize(0);

  }

}

//______________________________________________________________________________
void GMCTTrackFit::EndOfRun()
{

  //    GetHResidual()->Draw();
}
//______________________________________________________________________________
void GMCTTrackFit::Terminate()
{
}

Double_t DISTANCE(TVector3 wire_pos,TVector3 w,TVector3 trk_pos,TVector3 trk_dir){
  
  Double_t impact_parameter=-999999;
  Double_t A=trk_dir.Dot(trk_dir);
  Double_t B=trk_dir.Dot(w);//Dot() prodotto scalare tra trk e wire      
  Double_t C=w.Dot(w); 
  Double_t D=trk_dir.Dot(trk_pos-wire_pos);
  Double_t E=w.Dot(trk_pos-wire_pos);
  
  TVector3 P0 = trk_pos + (B*E-C*D)/(A*C-B*B)*trk_dir;
  TVector3 Q0 = wire_pos + (A*E-B*D)/(A*C-B*B)*w;
 
  impact_parameter=(P0-Q0).Mag();
  
  return impact_parameter;
}

Double_t SIGNED_DISTANCE(TVector3 wire_pos,TVector3 w,TVector3 trk_pos,TVector3 trk_dir){
  
  Double_t impact_parameter=-999999;
  Double_t A=trk_dir.Dot(trk_dir);
  Double_t B=trk_dir.Dot(w);//Dot() prodotto scalare tra trk e wire      
  Double_t C=w.Dot(w); 
  Double_t D=trk_dir.Dot(trk_pos-wire_pos);
  Double_t E=w.Dot(trk_pos-wire_pos);
  
  TVector3 P0 = trk_pos + (B*E-C*D)/(A*C-B*B)*trk_dir;
  TVector3 Q0 = wire_pos + (A*E-B*D)/(A*C-B*B)*w;
 
  impact_parameter=(P0-Q0).Mag();
  
  return TMath::Sign(1.,(P0-Q0).Y()) * impact_parameter;

}

void fcn(Int_t &npar, Double_t *gin, Double_t &f, Double_t *par, Int_t iflag){
  
  Double_t chisquare=0.;  
  Double_t sigma=0.12;
  
  Double_t y0 = par[0];
  Double_t z0 = par[1];
  Double_t theta = par[2];
  Double_t phi = par[3];

  Double_t R = gAnalyzer->GetGSP()->Gettube_radius();
  Int_t nhits = gAnalyzer->GetHitSize();
  TVector3 wire_dir=TVector3(1.,0.,0.);

  Geometry *Geom = Geometry::GetInstance();

  Int_t ngood = 0;

  for(Int_t ihit=0; ihit<nhits; ihit++){
    
     Int_t tube_nr=gAnalyzer->GetHitAt(ihit)->Gettube_nr();
    
     TVector3 wire_pos = Geom->Getwire_pos(tube_nr);

     Double_t trk_impact_par=DISTANCE(wire_pos,wire_dir,TVector3(0.,y0,z0),TVector3(sin(theta)*sin(phi),sin(theta)*cos(phi),cos(theta)));
     Double_t t_meas=gAnalyzer->GetHitAt(ihit)->Gett_meas();
	 
     if(tube_nr != gAnalyzer->GetGSP()->Getcentral_tube()){
       chisquare+=(pow(D(t_meas)-trk_impact_par,2))/pow(sigma,2);
       ngood++;
     }
  }

  f=chisquare/(ngood-2.);

}

void fcn_lr(Int_t &npar, Double_t *gin, Double_t &f, Double_t *par, Int_t iflag){
  
  Double_t chisquare=0.;  
  Double_t sigma=0.12;
  
  Double_t y0 = par[0];
  Double_t z0 = par[1];
  Double_t theta = par[2];
  Double_t phi = par[3];

  Double_t pre_y0 = par[4];
  Double_t pre_z0 = par[5];
  Double_t pre_theta = par[6];
  Double_t pre_phi = par[7];

  Double_t R = gAnalyzer->GetGSP()->Gettube_radius();
  Int_t nhits = gAnalyzer->GetHitSize();
  TVector3 wire_dir=TVector3(1.,0.,0.);

  Geometry *Geom = Geometry::GetInstance();

  Int_t ngood = 0;

  for(Int_t ihit=0; ihit<nhits; ihit++){
    
     Int_t tube_nr=gAnalyzer->GetHitAt(ihit)->Gettube_nr();
    
     TVector3 wire_pos = Geom->Getwire_pos(tube_nr);

     ///Track fitted with absolute distance is used to determine the LR solutions
     Double_t signed_trk_impact_par=SIGNED_DISTANCE(wire_pos,wire_dir,TVector3(0.,pre_y0,pre_z0),TVector3(sin(pre_theta)*sin(pre_phi),sin(pre_theta)*cos(pre_phi),cos(pre_theta)));

     ///Signed distance for the track to be fitted
     Double_t trk_impact_par=SIGNED_DISTANCE(wire_pos,wire_dir,TVector3(0.,y0,z0),TVector3(sin(theta)*sin(phi),sin(theta)*cos(phi),cos(theta)));

     Double_t t_meas=gAnalyzer->GetHitAt(ihit)->Gett_meas();
     
     //cout << TMath::Sign(1.,signed_trk_impact_par)*D(t_meas) << "  " << trk_impact_par << endl;

     if(tube_nr != gAnalyzer->GetGSP()->Getcentral_tube()){
       chisquare+=(pow(TMath::Sign(1.,signed_trk_impact_par)*D(t_meas)-trk_impact_par,2))/pow(sigma,2);
       ngood++;
     }
  }

  f=chisquare/(ngood-2.);

}

Int_t GMCTTrackFit::MinuitFit (){  
  
  TMinuit minuit(4);  //initialize TMinuit with a maximum of 5 params             
  Double_t best_y0,best_z0,best_theta,best_phi;       
  Double_t best_y0_err,best_z0_err,best_theta_err,best_phi_err;       
  
  minuit.SetFCN(fcn);
  minuit.SetPrintLevel(-1);

  minuit.DefineParameter(0, "y0",1., 0.01,-15, 15);
  minuit.DefineParameter(1, "z0",-50, 0.01,-45, 45);
  minuit.DefineParameter(2, "theta",0.,0.01,-M_PI/2., M_PI/2.);
  minuit.DefineParameter(3, "phi",0.,0.1,-M_PI,M_PI);
  minuit.FixParameter(3);
  minuit.FixParameter(1);
  Int_t status = minuit.Command("MIGRAD 1000");
  
  Double_t chi2, fedm, errdef;
  Int_t npari, nparx, istat;
  minuit.mnstat(chi2,fedm,errdef,npari,nparx,istat);

  if(status == 0 && chi2 < GetSP()->GetMaxChi2()){

    minuit.GetParameter(0,best_y0,best_y0_err);
    minuit.GetParameter(1,best_z0,best_z0_err);
    minuit.GetParameter(2,best_theta,best_theta_err);
    minuit.GetParameter(3,best_phi,best_phi_err);

    gAnalyzer->SetTrackSize(1);
    
    gAnalyzer->GetTrackAt(0)->Sety0_trk(best_y0);
    gAnalyzer->GetTrackAt(0)->Sety0_trk_err(best_y0_err);
    gAnalyzer->GetTrackAt(0)->Setz0_trk(best_z0);
    gAnalyzer->GetTrackAt(0)->Setz0_trk_err(best_z0_err);
    gAnalyzer->GetTrackAt(0)->Settheta_trk(best_theta);
    gAnalyzer->GetTrackAt(0)->Settheta_trk_err(best_theta_err);
    gAnalyzer->GetTrackAt(0)->Setphi_trk(best_phi);
    gAnalyzer->GetTrackAt(0)->Setphi_trk_err(best_phi_err);    
    gAnalyzer->GetTrackAt(0)->Setchi2(chi2);
    //inizialize 
    gAnalyzer->GetTrackAt(0)->Setd_trk_central(999.);
    gAnalyzer->GetTrackAt(0)->Setd_meas_central(9999.);

    return 1;

  }

  gAnalyzer->SetTrackSize(0);

  return 0;

}

Int_t GMCTTrackFit::LeftRightMinuitFit (){  
  
  TMinuit minuit(4);  //initialize TMinuit with a maximum of 5 params             
  Double_t best_y0,best_z0,best_theta,best_phi;       
  Double_t best_y0_err,best_z0_err,best_theta_err,best_phi_err;       
  
  minuit.SetFCN(fcn_lr);
  minuit.SetPrintLevel(-1);

  minuit.DefineParameter(0, "y0",1., 0.01,-15, 15);
  minuit.DefineParameter(1, "z0",-50, 0.01,-45, 45);
  minuit.DefineParameter(2, "theta",0.,0.01,-M_PI/2., M_PI/2.);
  minuit.DefineParameter(3, "phi",0.,0.1,-M_PI,M_PI);

  minuit.DefineParameter(4, "pre_y0",gAnalyzer->GetTrackAt(0)->Gety0_trk(), 0.01,-15, 15);
  minuit.DefineParameter(5, "pre_z0",gAnalyzer->GetTrackAt(0)->Getz0_trk(), 0.01,-45, 45);
  minuit.DefineParameter(6, "pre_theta",gAnalyzer->GetTrackAt(0)->Gettheta_trk(),0.01,-M_PI/2., M_PI/2.);
  minuit.DefineParameter(7, "pre_phi",gAnalyzer->GetTrackAt(0)->Getphi_trk(),0.1,-M_PI,M_PI);

  //2D fit
  minuit.FixParameter(3);
  minuit.FixParameter(1);

  minuit.FixParameter(4);
  minuit.FixParameter(5);
  minuit.FixParameter(6);
  minuit.FixParameter(7);

  Int_t status = minuit.Command("MIGRAD 1000");
  
  Double_t chi2, fedm, errdef;
  Int_t npari, nparx, istat;
  minuit.mnstat(chi2,fedm,errdef,npari,nparx,istat);

  if(status == 0 && chi2 < GetSP()->GetMaxChi2()){

    minuit.GetParameter(0,best_y0,best_y0_err);
    minuit.GetParameter(1,best_z0,best_z0_err);
    minuit.GetParameter(2,best_theta,best_theta_err);
    minuit.GetParameter(3,best_phi,best_phi_err);

    gAnalyzer->SetTrackSize(1);
    
    gAnalyzer->GetTrackAt(0)->Sety0_trk(best_y0);
    gAnalyzer->GetTrackAt(0)->Sety0_trk_err(best_y0_err);
    gAnalyzer->GetTrackAt(0)->Setz0_trk(best_z0);
    gAnalyzer->GetTrackAt(0)->Setz0_trk_err(best_z0_err);
    gAnalyzer->GetTrackAt(0)->Settheta_trk(best_theta);
    gAnalyzer->GetTrackAt(0)->Settheta_trk_err(best_theta_err);
    gAnalyzer->GetTrackAt(0)->Setphi_trk(best_phi);
    gAnalyzer->GetTrackAt(0)->Setphi_trk_err(best_phi_err);    
    gAnalyzer->GetTrackAt(0)->Setchi2(chi2);
    //inizialize 
    gAnalyzer->GetTrackAt(0)->Setd_trk_central(999.);
    gAnalyzer->GetTrackAt(0)->Setd_meas_central(9999.);

    return 1;

  }

  gAnalyzer->SetTrackSize(0);

  return 0;

}

