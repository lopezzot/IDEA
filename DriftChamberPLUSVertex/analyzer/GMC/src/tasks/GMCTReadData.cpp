////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// GMCTReadData                                                               //
//                                                                            //
// Begin_Html <!--
/*-->

<!--*/
// --> End_Html
//                                                                            //
//                                                                            //
// Please note: The following information is only correct after executing     //
// the ROMEBuilder.                                                           //
//                                                                            //
// This task accesses the following folders :                                 //
//     ODB                                                                    //
//     Event                                                                  //
//     Hit                                                                    //
//                                                                            //
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/* Generated header file containing necessary includes                        */
#include "generated/GMCTReadDataGeneratedIncludes.h"

////////////////////////////////////////////////////////////////////////////////
/*  This header was generated by ROMEBuilder. Manual changes above the        *
 * following line will be lost next time ROMEBuilder is executed.             */
/////////////////////////////////////----///////////////////////////////////////

#include "generated/GMCAnalyzer.h"
#include "tasks/GMCTReadData.h"
#include "util/Waveform.h"
#include "util/Geometry.h"
#include "ROMEiostream.h"

#include <set>

#define  TDCSCALE 0.098

// uncomment if you want to include headers of all folders
//#include "GMCAllFolders.h"


ClassImp(GMCTReadData)

//______________________________________________________________________________
void GMCTReadData::Init()
{

 if(gAnalyzer->GetMCHitSize()==0)
    cout<<"we are running only on real data! MCHit task is not active"<<endl;
  if(gAnalyzer->GetMCTrackSize()==0)
    cout<<"we are running only on real data! MCTrack task is not active"<<endl;
  
}

//______________________________________________________________________________
void GMCTReadData::BeginOfRun()
{

   cout << "Run Number : " << gAnalyzer->GetODB()->GetRunNumber() << endl;



}

//______________________________________________________________________________
void GMCTReadData::Event()
{

  DWORD data;

  Geometry *Geom = Geometry::GetInstance();

  /////TDC
  cout<< "# TDC hits: " << gAnalyzer->GetMidasDAQ()->GetTDC0BankEntries()<<endl;
  int channels[gAnalyzer->GetMidasDAQ()->GetTDC0BankEntries()];
  int times[gAnalyzer->GetMidasDAQ()->GetTDC0BankEntries()];

  int time0;
  int nHit=0;

  for(Int_t it=0;it<gAnalyzer->GetMidasDAQ()->GetTDC0BankEntries();it++){
   
    data = gAnalyzer->GetMidasDAQ()->GetTDC0BankAt(it);
    
    if((data & 0xf8000000) != 0x00000000) continue;

    int chan = 0x7F&(data>>19);
    int time = 0x7FFFF&data;

    cout<<"channel# "<<chan << "  " << time <<endl;

    if(Geom->GetWireIndex(chan) == 0){ ///REFERENCE TIME
      time0=time;
      gAnalyzer->GetEvent()->SetTDCRefTime(time0*TDCSCALE);
    }
    else if(Geom->GetWireIndex(chan) > 0){
      times[nHit]=time;
      channels[nHit]=chan;
      nHit++;
    }
  }

  //FILL HITS

  gAnalyzer->SetHitSize(0);

  set<Int_t> done;

  for(Int_t it=0; it<nHit;it++){

    Int_t tube_nr = Geom->GetWireIndex(channels[it]);
    Double_t t_meas = (times[it]-time0)*TDCSCALE - Geom->GetTimeOffset(tube_nr);

    if(!done.count(tube_nr) && t_meas > -10 && t_meas < 250){

      gAnalyzer->SetHitSize(gAnalyzer->GetHitSize()+1);

      gAnalyzer->GetHitAt(done.size())->Sett_meas(t_meas);
      gAnalyzer->GetHitAt(done.size())->Settube_nr(tube_nr);

      done.insert(tube_nr);

    }

  }

  /////OSCILLOSCOPE

  //Configuration
  data = gAnalyzer->GetMidasDAQ()->GetCONFBankAt(0);

  Int_t NSAMPLES[4] = {2502,5002,10002,20002};
  Float_t FREQ[4] = {1e9,2.5e9,5e9,10e9};
  Float_t UNIT[4] = {0.02,0.05,0.1,0.2};

  //TO BE TAKEN FROM ONLINE
  int fNCounts = NSAMPLES[(data & 0x3)];
  float SamplingFreq = FREQ[((data>>2) & 0x3)];
  int CentralTube = (data>>4) & 0xF;

  cout << CentralTube << endl;

  if(CentralTube!=gAnalyzer->GetGSP()->Getcentral_tube()){

    cout<<"---------------------------------------------------------------------------------------------------------------------------"<<endl;
    cout<<"------------------------------------------DIFFERENT CENTRAL TUBES NUMBER---------------------------------------------------"<<endl;
    cout<<"------------------------------------CHANGE STEERING PARAMETER BEFORE CONITUE-----------------------------------------------"<<endl;
    cout<<"---------------------------------------------------------------------------------------------------------------------------"<<endl;

  }

  float unit1 = UNIT[(data>>10) & 0x3] * 8./255.;
  float unit2 = UNIT[(data>>14) & 0x3] * 8./255.;
  float unit3 = UNIT[(data>>18) & 0x3] * 8./255.;
  float unit4 = UNIT[(data>>22) & 0x3] * 8./255.;
  int NChanOsc = 4;
  ////

  GMCEvent *event = gAnalyzer->GetEvent();
  event->SetOscWaveformSize(NChanOsc);

  Waveform *wf0 = event->GetOscWaveformAt(0);
  Waveform *wf1 = event->GetOscWaveformAt(1);
  Waveform *wf2 = event->GetOscWaveformAt(2);
  Waveform *wf3 = event->GetOscWaveformAt(3);

  Double_t *time = new Double_t[fNCounts];

  Double_t *tmpwf0 = new Double_t[fNCounts];
  Double_t *tmpwf1 = new Double_t[fNCounts];
  Double_t *tmpwf2 = new Double_t[fNCounts];
  Double_t *tmpwf3 = new Double_t[fNCounts];

  Int_t sample = 0;
  
  for(int i=0;i<fNCounts;i++) {

    time[i] = i/SamplingFreq;

    data = gAnalyzer->GetMidasDAQ()->GetLOSCBankAt(i);

    sample = (int)((data & 0xFF000000)>>24);
    tmpwf0[i] = sample*unit1;

    sample = (int)((data & 0xFF0000)>>16);
    tmpwf1[i] = sample*unit2;

    sample = (int)((data & 0xFF00)>>8);
    tmpwf2[i] = sample*unit3;

    sample = (int)(data & 0xFF);
    tmpwf3[i] = sample*unit4;

  }

  wf0->SetNPoints(fNCounts);

  wf0->Set(fNCounts,time,tmpwf0);
  wf1->Set(fNCounts,time,tmpwf1);
  wf2->Set(fNCounts,time,tmpwf2);
  wf3->Set(fNCounts,time,tmpwf3);

  delete [] tmpwf0;
  delete [] tmpwf1;
  delete [] tmpwf2;
  delete [] tmpwf3;


}

//______________________________________________________________________________
void GMCTReadData::EndOfRun()
{

}

//______________________________________________________________________________
void GMCTReadData::Terminate()
{
}

